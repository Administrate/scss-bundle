"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const yargs = require("yargs");
const Contracts = require("./contracts");
const verbosityValues = [];
for (const key in Contracts.Verbosity) {
    if (Number(key) % 1 !== 0) {
        verbosityValues.push(key);
    }
}
const DEDUPE_KEY = "dedupe";
exports.argv = yargs
    .help("h", "Show help.")
    .alias("h", "help")
    .version()
    .alias("v", "version")
    .config("config")
    .alias("c", "config")
    .options("e", {
    alias: "entry",
    describe: "Entry file.",
    type: "string"
})
    .options("d", {
    alias: "dest",
    describe: "Bundled file destination.",
    type: "string"
})
    .options("p", {
    alias: "project",
    describe: "Project locatation, where `node_modules` are located.",
    type: "string"
})
    .options("verbosity", {
    describe: "Verbosity of output.",
    choices: verbosityValues,
    default: Contracts.Verbosity[Contracts.Verbosity.Verbose]
})
    .options("includePaths", {
    describe: "Include paths for resolving imports.",
    type: "array"
})
    .array(DEDUPE_KEY)
    .default(DEDUPE_KEY, [], "[]")
    .usage("Usage: scss-bundle [options]")
    .string(["c", "e", "d"])
    .argv;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJndW1lbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2FyZ3VtZW50cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtCQUErQjtBQUUvQix5Q0FBeUM7QUFFekMsTUFBTSxlQUFlLEdBQWEsRUFBRSxDQUFDO0FBQ3JDLEtBQUssTUFBTSxHQUFHLElBQUksU0FBUyxDQUFDLFNBQVMsRUFBRTtJQUNuQyxJQUFJLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFO1FBQ3ZCLGVBQWUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7S0FDN0I7Q0FDSjtBQUVELE1BQU0sVUFBVSxHQUFHLFFBQVEsQ0FBQztBQUVmLFFBQUEsSUFBSSxHQUFHLEtBQUs7S0FDcEIsSUFBSSxDQUFDLEdBQUcsRUFBRSxZQUFZLENBQUM7S0FDdkIsS0FBSyxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUM7S0FDbEIsT0FBTyxFQUFFO0tBQ1QsS0FBSyxDQUFDLEdBQUcsRUFBRSxTQUFTLENBQUM7S0FDckIsTUFBTSxDQUFDLFFBQVEsQ0FBQztLQUNoQixLQUFLLENBQUMsR0FBRyxFQUFFLFFBQVEsQ0FBQztLQUNwQixPQUFPLENBQUMsR0FBRyxFQUFFO0lBQ1YsS0FBSyxFQUFFLE9BQU87SUFDZCxRQUFRLEVBQUUsYUFBYTtJQUN2QixJQUFJLEVBQUUsUUFBUTtDQUNqQixDQUFDO0tBQ0QsT0FBTyxDQUFDLEdBQUcsRUFBRTtJQUNWLEtBQUssRUFBRSxNQUFNO0lBQ2IsUUFBUSxFQUFFLDJCQUEyQjtJQUNyQyxJQUFJLEVBQUUsUUFBUTtDQUNqQixDQUFDO0tBQ0QsT0FBTyxDQUFDLEdBQUcsRUFBRTtJQUNWLEtBQUssRUFBRSxTQUFTO0lBQ2hCLFFBQVEsRUFBRSx1REFBdUQ7SUFDakUsSUFBSSxFQUFFLFFBQVE7Q0FDakIsQ0FBQztLQUNELE9BQU8sQ0FBQyxXQUFXLEVBQUU7SUFDbEIsUUFBUSxFQUFFLHNCQUFzQjtJQUNoQyxPQUFPLEVBQUUsZUFBZTtJQUN4QixPQUFPLEVBQUUsU0FBUyxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQztDQUM1RCxDQUFDO0tBQ0QsT0FBTyxDQUFDLGNBQWMsRUFBRTtJQUNyQixRQUFRLEVBQUUsc0NBQXNDO0lBQ2hELElBQUksRUFBRSxPQUFPO0NBQ2hCLENBQUM7S0FDRCxLQUFLLENBQUMsVUFBVSxDQUFDO0tBQ2pCLE9BQU8sQ0FBQyxVQUFVLEVBQUUsRUFBRSxFQUFFLElBQUksQ0FBQztLQUM3QixLQUFLLENBQUMsOEJBQThCLENBQUM7S0FDckMsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztLQUN2QixJQUFpQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgeWFyZ3MgZnJvbSBcInlhcmdzXCI7XHJcblxyXG5pbXBvcnQgKiBhcyBDb250cmFjdHMgZnJvbSBcIi4vY29udHJhY3RzXCI7XHJcblxyXG5jb25zdCB2ZXJib3NpdHlWYWx1ZXM6IHN0cmluZ1tdID0gW107XHJcbmZvciAoY29uc3Qga2V5IGluIENvbnRyYWN0cy5WZXJib3NpdHkpIHtcclxuICAgIGlmIChOdW1iZXIoa2V5KSAlIDEgIT09IDApIHtcclxuICAgICAgICB2ZXJib3NpdHlWYWx1ZXMucHVzaChrZXkpO1xyXG4gICAgfVxyXG59XHJcblxyXG5jb25zdCBERURVUEVfS0VZID0gXCJkZWR1cGVcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBhcmd2ID0geWFyZ3NcclxuICAgIC5oZWxwKFwiaFwiLCBcIlNob3cgaGVscC5cIilcclxuICAgIC5hbGlhcyhcImhcIiwgXCJoZWxwXCIpXHJcbiAgICAudmVyc2lvbigpXHJcbiAgICAuYWxpYXMoXCJ2XCIsIFwidmVyc2lvblwiKVxyXG4gICAgLmNvbmZpZyhcImNvbmZpZ1wiKVxyXG4gICAgLmFsaWFzKFwiY1wiLCBcImNvbmZpZ1wiKVxyXG4gICAgLm9wdGlvbnMoXCJlXCIsIHtcclxuICAgICAgICBhbGlhczogXCJlbnRyeVwiLFxyXG4gICAgICAgIGRlc2NyaWJlOiBcIkVudHJ5IGZpbGUuXCIsXHJcbiAgICAgICAgdHlwZTogXCJzdHJpbmdcIlxyXG4gICAgfSlcclxuICAgIC5vcHRpb25zKFwiZFwiLCB7XHJcbiAgICAgICAgYWxpYXM6IFwiZGVzdFwiLFxyXG4gICAgICAgIGRlc2NyaWJlOiBcIkJ1bmRsZWQgZmlsZSBkZXN0aW5hdGlvbi5cIixcclxuICAgICAgICB0eXBlOiBcInN0cmluZ1wiXHJcbiAgICB9KVxyXG4gICAgLm9wdGlvbnMoXCJwXCIsIHtcclxuICAgICAgICBhbGlhczogXCJwcm9qZWN0XCIsXHJcbiAgICAgICAgZGVzY3JpYmU6IFwiUHJvamVjdCBsb2NhdGF0aW9uLCB3aGVyZSBgbm9kZV9tb2R1bGVzYCBhcmUgbG9jYXRlZC5cIixcclxuICAgICAgICB0eXBlOiBcInN0cmluZ1wiXHJcbiAgICB9KVxyXG4gICAgLm9wdGlvbnMoXCJ2ZXJib3NpdHlcIiwge1xyXG4gICAgICAgIGRlc2NyaWJlOiBcIlZlcmJvc2l0eSBvZiBvdXRwdXQuXCIsXHJcbiAgICAgICAgY2hvaWNlczogdmVyYm9zaXR5VmFsdWVzLFxyXG4gICAgICAgIGRlZmF1bHQ6IENvbnRyYWN0cy5WZXJib3NpdHlbQ29udHJhY3RzLlZlcmJvc2l0eS5WZXJib3NlXVxyXG4gICAgfSlcclxuICAgIC5vcHRpb25zKFwiaW5jbHVkZVBhdGhzXCIsIHtcclxuICAgICAgICBkZXNjcmliZTogXCJJbmNsdWRlIHBhdGhzIGZvciByZXNvbHZpbmcgaW1wb3J0cy5cIixcclxuICAgICAgICB0eXBlOiBcImFycmF5XCJcclxuICAgIH0pXHJcbiAgICAuYXJyYXkoREVEVVBFX0tFWSlcclxuICAgIC5kZWZhdWx0KERFRFVQRV9LRVksIFtdLCBcIltdXCIpXHJcbiAgICAudXNhZ2UoXCJVc2FnZTogc2Nzcy1idW5kbGUgW29wdGlvbnNdXCIpXHJcbiAgICAuc3RyaW5nKFtcImNcIiwgXCJlXCIsIFwiZFwiXSlcclxuICAgIC5hcmd2IGFzIENvbnRyYWN0cy5Bcmd1bWVudHNWYWx1ZXM7XHJcbiJdfQ==